document.addEventListener('DOMContentLoaded', () => {
  let tablist = [];
  let clickListener; // Declare the clickListener outside the getPageSource function
  // Counter variable for active event listeners
  let isShortcutPressed = false; // Initial value

  // Keyboard shortcut listener
 
  chrome.windows.getAll({ populate: true }, function(windows) {
    const ul = document.getElementById('tabList');
    ul.innerHTML = '';

    // Iterate through all windows and get the tabs in each window.
    for (let i = 0; i < windows.length; ++i) {
      const w = windows[i];

      for (let j = 0; j < w.tabs.length; ++j) {
        const t = w.tabs[j];
        // Do something with the tab, such as log its ID.
        console.log('Tab ID: ', t.id);

        // Create a closure to capture the value of 't' for each iteration
        (function(tab) {
          const d = {};
          const li = document.createElement('li');
          d[tab.title] = tab.id;
          const tabInfo = tab.id + '-' + tab.title; // Combine tab ID and webpage title
          li.textContent = tab.title;
          li.addEventListener('click', function() {
            getPageSource(tab.title, d);
          });
          ul.appendChild(li);
        })(t);
      }
    }
  });

  async function getPageSource(tabInfo, d) {
    const extractedList = tabInfo.split('-');
    const tabId = d[tabInfo];
    const currentTab = await chrome.tabs.get(tabId);
    
    chrome.tabs.update(tabId, { active: true });
    if (currentTab.url.startsWith('chrome://')) {
      console.log('Skipping execution on chrome:// URL:', currentTab.url);
      return;
    }
    const result = await chrome.scripting.executeScript({
      target: { tabId: tabId },
      function: (argument) => {
        // Function to get the CSS selector of an element
        isShortcutPressed=argument[0]
        isShortcutPressed=true
        document.addEventListener('keydown', function(event) {
          if (event.key === 'Enter' && event.ctrlKey) {
            // When "Enter" key and Ctrl key are pressed together (example shortcut)
            isShortcutPressed = false;
            alert('select label for ui object');
          }
        });
        console.log('Shortcut status:', isShortcutPressed);
        document.removeEventListener('click', clickListener);
        function getCSSSelector(element) {
          const selector = [];
          while (element && element.nodeType === Node.ELEMENT_NODE) {
            let path = element.nodeName.toLowerCase();
            if (element.id) {
              path += `#${element.id}`;
              selector.unshift(path);
              break;
            } else {
              let sibling = element;
              let index = 1;
              while (sibling && sibling.nodeType === Node.ELEMENT_NODE) {
                sibling = sibling.previousElementSibling;
                if (sibling && sibling.nodeName.toLowerCase() === path) {
                  index++;
                }
              }
              if (index > 1) {
                path += `:nth-of-type(${index})`;
              }
            }
            selector.unshift(path);
            element = element.parentNode;
          }
          return selector.join(' > ');
        }
        function getAbsoluteXPath(element) {
          const xpath = [];
          while (element && element.nodeType === Node.ELEMENT_NODE) {
            let path = element.nodeName.toLowerCase();
            if (element.id) {
              path += `[@id="${element.id}"]`;
              xpath.unshift(path);
              break;
            } else {
              let sibling = element;
              let index = 1;
              while (sibling && sibling.nodeType === Node.ELEMENT_NODE) {
                sibling = sibling.previousElementSibling;
                if (sibling && sibling.nodeName.toLowerCase() === path) {
                  index++;
                }
              }
              if (index > 1) {
                path += `[${index}]`;
              }
            }
            xpath.unshift(path);
            element = element.parentNode;
          }
          return `/${xpath.join('/')}`;
        }
        
        function getAbsoluteXPathFromRoot(element) {
          const xpath = [];
          while (element && element.nodeType === Node.ELEMENT_NODE) {
            xpath.unshift(getAbsoluteXPath(element));
            element = element.parentNode;
          }
          return `/${xpath.join('/')}`;
        }
        
        
        // Define the clickListener function
        function clickListener(event) {
          
          const xpath = getCSSSelector(event.target);
          const xpath1=getAbsoluteXPathFromRoot(event.target)
          if(isShortcutPressed){
          fetch("http://127.0.0.1:8000/capture_xpath", {
            method: "POST",
            body: JSON.stringify({ xpath: xpath,xpath1:xpath1 })
          })
            .then(function(response) {
              // Handle the response from the backend if needed
            })
            .catch(function(error) {
              console.error("Error:", error);
            });
          }else{
            fetch("http://127.0.0.1:8000/capture_label_xpath", {
            method: "POST",
            body: JSON.stringify({ xpath: xpath ,xpath1:xpath1})
          })
            .then(function(response) {
              // Handle the response from the backend if needed
            })
            .catch(function(error) {
              console.error("Error:", error);
            });
          }
          console.log('Clicked element XPath:', xpath);
          const htmlContent = document.documentElement.outerHTML;
          
          fetch("http://127.0.0.1:8000/extract_page", {
            method: "POST",
            body: JSON.stringify({ htmlContent: htmlContent })
          })
            .then(function(response) {
              // Handle the response from the backend if needed
            })
            .catch(function(error) {
              console.error("Error:", error);
            });

          // Remove the click event listener after each click
          document.removeEventListener('click', clickListener);
          // Decrement the counter after removing the listener

          // Add the click event listener back to wait for the next click
          document.addEventListener('click', clickListener);
          // Increment the counter after adding the listener
        }

        // Add the initial click event listener
        document.addEventListener('click', clickListener);
        // Increment the counter after adding the listener
      },
      args:[false]
    });

    
  }

  const closeButton = document.getElementById('closeButton');
  closeButton.addEventListener('click', function() {
    // Remove the click event listener when the close button is clicked
    document.removeEventListener('click', clickListener);
    // Decrement the counter after removing the listener

    window.close();
  });

  function getPageSourceCode() {
    const html = document.documentElement.outerHTML;
    if (html === undefined) {
      return '';
    } else {
      return html;
    }
  }

  // Function to get the count of active event listeners
  function getEventListenerCount() {
    return eventListenerCount;
  }
});
